rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if the requesting user is an administrator.
    // It verifies that the user is authenticated and has the 'isAdmin' flag set to true.
    function isAdmin() {
      return request.auth != null && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // Rules for the 'users' collection.
    match /users/{userId} {
      // Public profiles are readable by anyone.
      allow read;
      
      // Users can only write to their own document.
      // This covers create, update, and delete operations for the logged-in user.
      allow write: if request.auth.uid == userId;
    }

    // Rules for collections that are publicly readable but only managed by administrators.
    match /{collection}/{docId} where collection in ['problems', 'courses', 'badges', 'settings'] {
      allow read;
      allow write: if isAdmin();
    }
    
    // Rules for user-generated problem sheets.
    match /problem-sheets/{sheetId} {
        allow read;

        // Any authenticated user can create a new problem sheet.
        allow create: if request.auth != null;
        
        // The creator of the sheet can update its core content (name, problemIds).
        // Any authenticated user can update the 'subscribers' list to subscribe/unsubscribe.
        allow update: if (request.auth.uid == resource.data.createdBy) || 
                       (request.auth != null && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['subscribers']));
    }
  }
}
