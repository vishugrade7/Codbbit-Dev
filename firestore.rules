
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check for admin status securely.
    // It verifies that the user is authenticated before checking their admin status.
    function isAdmin() {
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // --- User Data Rules ---
    match /users/{userId} {
      // Anyone can read public profile data.
      allow read;
      
      // Authenticated users can create their own document.
      allow create: if request.auth.uid == userId;
      
      // Users can update their own data. Admins can update any user's data (e.g., to grant admin status).
      allow update: if request.auth.uid == userId || isAdmin();
      
      // Only the user themselves or an admin can delete a user account.
      allow delete: if request.auth.uid == userId || isAdmin();
    }

    // --- Content Rules (Problems, Courses, Badges, Settings) ---
    // These collections are readable by anyone but only writable by admins.
    match /problems/{docId} {
      allow read;
      allow write: if isAdmin();
    }
    
    match /courses/{courseId} {
      allow read;
      allow write: if isAdmin();
    }

    match /badges/{badgeId} {
      allow read;
      allow write: if isAdmin();
    }
    
    match /settings/{settingId} {
      allow read;
      allow write: if isAdmin();
    }

    // --- Problem Sheets Rules ---
    match /problem-sheets/{sheetId} {
      // Anyone can read public sheets.
      allow read;
      
      // Any authenticated user can create a sheet.
      allow create: if request.auth != null;
      
      // The creator can update any field. 
      // Other authenticated users can only update the 'subscribers' array.
      allow update: if (request.auth.uid == resource.data.createdBy) || 
                       (request.auth != null && request.resource.data.keys().hasOnly(['subscribers']));
                       
      // Only the creator or an admin can delete a sheet.
      allow delete: if request.auth.uid == resource.data.createdBy || isAdmin();
    }
  }
}
